# CS Test Automation Framework - Database Query Configuration
# This file contains predefined SQL queries for database testing
# Queries can be referenced by their keys in test scenarios

# ==================== USER QUERIES ====================
# User Selection Queries
GET_ALL_USERS=SELECT * FROM Users WHERE IsDeleted = 0
GET_USER_BY_ID=SELECT * FROM Users WHERE UserId = @userId AND IsDeleted = 0
GET_USER_BY_EMAIL=SELECT * FROM Users WHERE Email = @email AND IsDeleted = 0
GET_USER_BY_USERNAME=SELECT * FROM Users WHERE Username = @username AND IsDeleted = 0
GET_ACTIVE_USERS=SELECT * FROM Users WHERE IsActive = 1 AND IsDeleted = 0
GET_INACTIVE_USERS=SELECT * FROM Users WHERE IsActive = 0 AND IsDeleted = 0
GET_USERS_BY_ROLE=SELECT u.* FROM Users u INNER JOIN UserRoles ur ON u.UserId = ur.UserId WHERE ur.RoleId = @roleId AND u.IsDeleted = 0
GET_USERS_BY_DEPARTMENT=SELECT * FROM Users WHERE DepartmentId = @departmentId AND IsDeleted = 0
GET_USERS_CREATED_TODAY=SELECT * FROM Users WHERE CAST(CreatedDate AS DATE) = CAST(GETDATE() AS DATE)
GET_USERS_WITH_2FA=SELECT * FROM Users WHERE TwoFactorEnabled = 1 AND IsDeleted = 0

# User Modification Queries
INSERT_USER=INSERT INTO Users (Username, Email, FirstName, LastName, PasswordHash, IsActive, CreatedDate, CreatedBy) VALUES (@username, @email, @firstName, @lastName, @passwordHash, @isActive, GETDATE(), @createdBy)
UPDATE_USER=UPDATE Users SET FirstName = @firstName, LastName = @lastName, Email = @email, ModifiedDate = GETDATE(), ModifiedBy = @modifiedBy WHERE UserId = @userId
UPDATE_USER_PASSWORD=UPDATE Users SET PasswordHash = @passwordHash, PasswordLastChanged = GETDATE(), ModifiedDate = GETDATE(), ModifiedBy = @modifiedBy WHERE UserId = @userId
ACTIVATE_USER=UPDATE Users SET IsActive = 1, ActivatedDate = GETDATE(), ModifiedDate = GETDATE(), ModifiedBy = @modifiedBy WHERE UserId = @userId
DEACTIVATE_USER=UPDATE Users SET IsActive = 0, DeactivatedDate = GETDATE(), ModifiedDate = GETDATE(), ModifiedBy = @modifiedBy WHERE UserId = @userId
DELETE_USER_SOFT=UPDATE Users SET IsDeleted = 1, DeletedDate = GETDATE(), DeletedBy = @deletedBy WHERE UserId = @userId
DELETE_USER_HARD=DELETE FROM Users WHERE UserId = @userId

# User Validation Queries
CHECK_USER_EXISTS=SELECT COUNT(*) as UserCount FROM Users WHERE Email = @email OR Username = @username
CHECK_EMAIL_EXISTS=SELECT COUNT(*) as EmailCount FROM Users WHERE Email = @email AND IsDeleted = 0
CHECK_USERNAME_EXISTS=SELECT COUNT(*) as UsernameCount FROM Users WHERE Username = @username AND IsDeleted = 0
VALIDATE_USER_PASSWORD=SELECT UserId FROM Users WHERE Username = @username AND PasswordHash = @passwordHash AND IsActive = 1 AND IsDeleted = 0

# ==================== ROLE & PERMISSION QUERIES ====================
# Role Queries
GET_ALL_ROLES=SELECT * FROM Roles WHERE IsActive = 1
GET_ROLE_BY_ID=SELECT * FROM Roles WHERE RoleId = @roleId
GET_ROLE_BY_NAME=SELECT * FROM Roles WHERE RoleName = @roleName
GET_USER_ROLES=SELECT r.* FROM Roles r INNER JOIN UserRoles ur ON r.RoleId = ur.RoleId WHERE ur.UserId = @userId AND r.IsActive = 1
INSERT_ROLE=INSERT INTO Roles (RoleName, Description, IsActive, CreatedDate, CreatedBy) VALUES (@roleName, @description, 1, GETDATE(), @createdBy)
ASSIGN_ROLE_TO_USER=INSERT INTO UserRoles (UserId, RoleId, AssignedDate, AssignedBy) VALUES (@userId, @roleId, GETDATE(), @assignedBy)
REMOVE_ROLE_FROM_USER=DELETE FROM UserRoles WHERE UserId = @userId AND RoleId = @roleId

# Permission Queries
GET_ALL_PERMISSIONS=SELECT * FROM Permissions WHERE IsActive = 1
GET_PERMISSION_BY_ID=SELECT * FROM Permissions WHERE PermissionId = @permissionId
GET_ROLE_PERMISSIONS=SELECT p.* FROM Permissions p INNER JOIN RolePermissions rp ON p.PermissionId = rp.PermissionId WHERE rp.RoleId = @roleId
GET_USER_PERMISSIONS=SELECT DISTINCT p.* FROM Permissions p INNER JOIN RolePermissions rp ON p.PermissionId = rp.PermissionId INNER JOIN UserRoles ur ON rp.RoleId = ur.RoleId WHERE ur.UserId = @userId
ASSIGN_PERMISSION_TO_ROLE=INSERT INTO RolePermissions (RoleId, PermissionId, AssignedDate, AssignedBy) VALUES (@roleId, @permissionId, GETDATE(), @assignedBy)
CHECK_USER_HAS_PERMISSION=SELECT COUNT(*) as HasPermission FROM Permissions p INNER JOIN RolePermissions rp ON p.PermissionId = rp.PermissionId INNER JOIN UserRoles ur ON rp.RoleId = ur.RoleId WHERE ur.UserId = @userId AND p.PermissionName = @permissionName

# ==================== ORDER QUERIES ====================
# Order Selection Queries
GET_ALL_ORDERS=SELECT * FROM Orders WHERE IsDeleted = 0 ORDER BY OrderDate DESC
GET_ORDER_BY_ID=SELECT * FROM Orders WHERE OrderId = @orderId AND IsDeleted = 0
GET_ORDER_BY_NUMBER=SELECT * FROM Orders WHERE OrderNumber = @orderNumber AND IsDeleted = 0
GET_ORDERS_BY_USER=SELECT * FROM Orders WHERE UserId = @userId AND IsDeleted = 0 ORDER BY OrderDate DESC
GET_ORDERS_BY_STATUS=SELECT * FROM Orders WHERE OrderStatus = @status AND IsDeleted = 0
GET_ORDERS_BY_DATE_RANGE=SELECT * FROM Orders WHERE OrderDate BETWEEN @startDate AND @endDate AND IsDeleted = 0
GET_PENDING_ORDERS=SELECT * FROM Orders WHERE OrderStatus IN ('Pending', 'Processing') AND IsDeleted = 0
GET_COMPLETED_ORDERS=SELECT * FROM Orders WHERE OrderStatus = 'Completed' AND IsDeleted = 0
GET_CANCELLED_ORDERS=SELECT * FROM Orders WHERE OrderStatus = 'Cancelled' AND IsDeleted = 0
GET_ORDERS_WITH_ITEMS=SELECT o.*, oi.* FROM Orders o INNER JOIN OrderItems oi ON o.OrderId = oi.OrderId WHERE o.OrderId = @orderId

# Order Modification Queries
INSERT_ORDER=INSERT INTO Orders (OrderNumber, UserId, OrderDate, OrderStatus, TotalAmount, CreatedDate, CreatedBy) VALUES (@orderNumber, @userId, GETDATE(), @orderStatus, @totalAmount, GETDATE(), @createdBy)
UPDATE_ORDER_STATUS=UPDATE Orders SET OrderStatus = @orderStatus, ModifiedDate = GETDATE(), ModifiedBy = @modifiedBy WHERE OrderId = @orderId
UPDATE_ORDER_TOTAL=UPDATE Orders SET TotalAmount = @totalAmount, ModifiedDate = GETDATE(), ModifiedBy = @modifiedBy WHERE OrderId = @orderId
CANCEL_ORDER=UPDATE Orders SET OrderStatus = 'Cancelled', CancelledDate = GETDATE(), CancelledBy = @cancelledBy, CancellationReason = @reason WHERE OrderId = @orderId
DELETE_ORDER_SOFT=UPDATE Orders SET IsDeleted = 1, DeletedDate = GETDATE(), DeletedBy = @deletedBy WHERE OrderId = @orderId

# Order Item Queries
GET_ORDER_ITEMS=SELECT * FROM OrderItems WHERE OrderId = @orderId
INSERT_ORDER_ITEM=INSERT INTO OrderItems (OrderId, ProductId, Quantity, UnitPrice, TotalPrice) VALUES (@orderId, @productId, @quantity, @unitPrice, @totalPrice)
UPDATE_ORDER_ITEM_QUANTITY=UPDATE OrderItems SET Quantity = @quantity, TotalPrice = @totalPrice WHERE OrderItemId = @orderItemId
DELETE_ORDER_ITEM=DELETE FROM OrderItems WHERE OrderItemId = @orderItemId

# Order Statistics Queries
GET_ORDER_COUNT_BY_STATUS=SELECT OrderStatus, COUNT(*) as OrderCount FROM Orders WHERE IsDeleted = 0 GROUP BY OrderStatus
GET_DAILY_ORDER_COUNT=SELECT CAST(OrderDate AS DATE) as OrderDate, COUNT(*) as OrderCount FROM Orders WHERE OrderDate >= DATEADD(day, -30, GETDATE()) GROUP BY CAST(OrderDate AS DATE)
GET_TOP_CUSTOMERS=SELECT TOP 10 u.UserId, u.FirstName, u.LastName, COUNT(o.OrderId) as OrderCount, SUM(o.TotalAmount) as TotalSpent FROM Users u INNER JOIN Orders o ON u.UserId = o.UserId WHERE o.IsDeleted = 0 GROUP BY u.UserId, u.FirstName, u.LastName ORDER BY TotalSpent DESC
GET_REVENUE_BY_MONTH=SELECT YEAR(OrderDate) as Year, MONTH(OrderDate) as Month, SUM(TotalAmount) as Revenue FROM Orders WHERE OrderStatus = 'Completed' GROUP BY YEAR(OrderDate), MONTH(OrderDate)

# ==================== PRODUCT QUERIES ====================
# Product Selection Queries
GET_ALL_PRODUCTS=SELECT * FROM Products WHERE IsActive = 1 AND IsDeleted = 0
GET_PRODUCT_BY_ID=SELECT * FROM Products WHERE ProductId = @productId AND IsDeleted = 0
GET_PRODUCT_BY_SKU=SELECT * FROM Products WHERE SKU = @sku AND IsDeleted = 0
GET_PRODUCTS_BY_CATEGORY=SELECT p.* FROM Products p INNER JOIN ProductCategories pc ON p.ProductId = pc.ProductId WHERE pc.CategoryId = @categoryId AND p.IsActive = 1 AND p.IsDeleted = 0
GET_PRODUCTS_IN_STOCK=SELECT * FROM Products WHERE StockQuantity > 0 AND IsActive = 1 AND IsDeleted = 0
GET_OUT_OF_STOCK_PRODUCTS=SELECT * FROM Products WHERE StockQuantity = 0 AND IsActive = 1 AND IsDeleted = 0
GET_LOW_STOCK_PRODUCTS=SELECT * FROM Products WHERE StockQuantity <= ReorderLevel AND StockQuantity > 0 AND IsActive = 1 AND IsDeleted = 0
GET_FEATURED_PRODUCTS=SELECT * FROM Products WHERE IsFeatured = 1 AND IsActive = 1 AND IsDeleted = 0
GET_PRODUCTS_BY_PRICE_RANGE=SELECT * FROM Products WHERE Price BETWEEN @minPrice AND @maxPrice AND IsActive = 1 AND IsDeleted = 0

# Product Modification Queries
INSERT_PRODUCT=INSERT INTO Products (ProductName, SKU, Description, Price, StockQuantity, CategoryId, IsActive, CreatedDate, CreatedBy) VALUES (@productName, @sku, @description, @price, @stockQuantity, @categoryId, 1, GETDATE(), @createdBy)
UPDATE_PRODUCT=UPDATE Products SET ProductName = @productName, Description = @description, Price = @price, ModifiedDate = GETDATE(), ModifiedBy = @modifiedBy WHERE ProductId = @productId
UPDATE_PRODUCT_STOCK=UPDATE Products SET StockQuantity = @stockQuantity, ModifiedDate = GETDATE(), ModifiedBy = @modifiedBy WHERE ProductId = @productId
UPDATE_PRODUCT_PRICE=UPDATE Products SET Price = @price, ModifiedDate = GETDATE(), ModifiedBy = @modifiedBy WHERE ProductId = @productId
ACTIVATE_PRODUCT=UPDATE Products SET IsActive = 1, ModifiedDate = GETDATE(), ModifiedBy = @modifiedBy WHERE ProductId = @productId
DEACTIVATE_PRODUCT=UPDATE Products SET IsActive = 0, ModifiedDate = GETDATE(), ModifiedBy = @modifiedBy WHERE ProductId = @productId
DELETE_PRODUCT_SOFT=UPDATE Products SET IsDeleted = 1, DeletedDate = GETDATE(), DeletedBy = @deletedBy WHERE ProductId = @productId

# Inventory Queries
CHECK_STOCK_AVAILABILITY=SELECT ProductId, ProductName, StockQuantity FROM Products WHERE ProductId = @productId AND StockQuantity >= @requestedQuantity
REDUCE_STOCK=UPDATE Products SET StockQuantity = StockQuantity - @quantity WHERE ProductId = @productId AND StockQuantity >= @quantity
INCREASE_STOCK=UPDATE Products SET StockQuantity = StockQuantity + @quantity WHERE ProductId = @productId
GET_STOCK_MOVEMENTS=SELECT * FROM StockMovements WHERE ProductId = @productId ORDER BY MovementDate DESC
RECORD_STOCK_MOVEMENT=INSERT INTO StockMovements (ProductId, MovementType, Quantity, ReferenceId, ReferenceType, MovementDate, CreatedBy) VALUES (@productId, @movementType, @quantity, @referenceId, @referenceType, GETDATE(), @createdBy)

# ==================== CUSTOMER QUERIES ====================
# Customer Selection Queries
GET_ALL_CUSTOMERS=SELECT * FROM Customers WHERE IsDeleted = 0
GET_CUSTOMER_BY_ID=SELECT * FROM Customers WHERE CustomerId = @customerId AND IsDeleted = 0
GET_CUSTOMER_BY_EMAIL=SELECT * FROM Customers WHERE Email = @email AND IsDeleted = 0
GET_CUSTOMER_BY_PHONE=SELECT * FROM Customers WHERE Phone = @phone AND IsDeleted = 0
GET_VIP_CUSTOMERS=SELECT * FROM Customers WHERE CustomerType = 'VIP' AND IsDeleted = 0
GET_NEW_CUSTOMERS=SELECT * FROM Customers WHERE CreatedDate >= DATEADD(day, -30, GETDATE()) AND IsDeleted = 0
GET_CUSTOMERS_BY_COUNTRY=SELECT * FROM Customers WHERE Country = @country AND IsDeleted = 0
GET_CUSTOMERS_WITH_ORDERS=SELECT DISTINCT c.* FROM Customers c INNER JOIN Orders o ON c.CustomerId = o.CustomerId WHERE c.IsDeleted = 0

# Customer Modification Queries
INSERT_CUSTOMER=INSERT INTO Customers (FirstName, LastName, Email, Phone, Address, City, State, Country, PostalCode, CustomerType, CreatedDate, CreatedBy) VALUES (@firstName, @lastName, @email, @phone, @address, @city, @state, @country, @postalCode, @customerType, GETDATE(), @createdBy)
UPDATE_CUSTOMER=UPDATE Customers SET FirstName = @firstName, LastName = @lastName, Email = @email, Phone = @phone, ModifiedDate = GETDATE(), ModifiedBy = @modifiedBy WHERE CustomerId = @customerId
UPDATE_CUSTOMER_ADDRESS=UPDATE Customers SET Address = @address, City = @city, State = @state, Country = @country, PostalCode = @postalCode, ModifiedDate = GETDATE(), ModifiedBy = @modifiedBy WHERE CustomerId = @customerId
UPGRADE_TO_VIP=UPDATE Customers SET CustomerType = 'VIP', VIPSince = GETDATE(), ModifiedDate = GETDATE(), ModifiedBy = @modifiedBy WHERE CustomerId = @customerId
DELETE_CUSTOMER_SOFT=UPDATE Customers SET IsDeleted = 1, DeletedDate = GETDATE(), DeletedBy = @deletedBy WHERE CustomerId = @customerId

# Customer Analytics Queries
GET_CUSTOMER_LIFETIME_VALUE=SELECT c.CustomerId, c.FirstName, c.LastName, SUM(o.TotalAmount) as LifetimeValue FROM Customers c INNER JOIN Orders o ON c.CustomerId = o.CustomerId WHERE o.OrderStatus = 'Completed' GROUP BY c.CustomerId, c.FirstName, c.LastName
GET_CUSTOMER_ORDER_HISTORY=SELECT o.* FROM Orders o WHERE o.CustomerId = @customerId ORDER BY o.OrderDate DESC
GET_CUSTOMER_FAVORITE_PRODUCTS=SELECT TOP 10 p.ProductId, p.ProductName, SUM(oi.Quantity) as TotalOrdered FROM Products p INNER JOIN OrderItems oi ON p.ProductId = oi.ProductId INNER JOIN Orders o ON oi.OrderId = o.OrderId WHERE o.CustomerId = @customerId GROUP BY p.ProductId, p.ProductName ORDER BY TotalOrdered DESC

# ==================== TRANSACTION QUERIES ====================
# Payment Queries
GET_ALL_PAYMENTS=SELECT * FROM Payments WHERE IsDeleted = 0
GET_PAYMENT_BY_ID=SELECT * FROM Payments WHERE PaymentId = @paymentId
GET_PAYMENTS_BY_ORDER=SELECT * FROM Payments WHERE OrderId = @orderId
GET_PAYMENTS_BY_METHOD=SELECT * FROM Payments WHERE PaymentMethod = @paymentMethod
GET_PENDING_PAYMENTS=SELECT * FROM Payments WHERE PaymentStatus = 'Pending'
GET_FAILED_PAYMENTS=SELECT * FROM Payments WHERE PaymentStatus = 'Failed' AND PaymentDate >= DATEADD(day, -7, GETDATE())
INSERT_PAYMENT=INSERT INTO Payments (OrderId, PaymentMethod, Amount, PaymentStatus, TransactionId, PaymentDate, CreatedDate, CreatedBy) VALUES (@orderId, @paymentMethod, @amount, @paymentStatus, @transactionId, GETDATE(), GETDATE(), @createdBy)
UPDATE_PAYMENT_STATUS=UPDATE Payments SET PaymentStatus = @paymentStatus, ProcessedDate = GETDATE(), ModifiedDate = GETDATE(), ModifiedBy = @modifiedBy WHERE PaymentId = @paymentId
PROCESS_REFUND=INSERT INTO Refunds (PaymentId, RefundAmount, RefundReason, RefundStatus, RefundDate, CreatedBy) VALUES (@paymentId, @refundAmount, @refundReason, 'Processed', GETDATE(), @createdBy)

# Transaction Log Queries
GET_TRANSACTION_LOG=SELECT * FROM TransactionLogs WHERE TransactionDate >= @startDate AND TransactionDate <= @endDate ORDER BY TransactionDate DESC
INSERT_TRANSACTION_LOG=INSERT INTO TransactionLogs (TransactionType, ReferenceId, UserId, Amount, Status, Description, TransactionDate, CreatedDate) VALUES (@transactionType, @referenceId, @userId, @amount, @status, @description, GETDATE(), GETDATE())
GET_USER_TRANSACTIONS=SELECT * FROM TransactionLogs WHERE UserId = @userId ORDER BY TransactionDate DESC

# ==================== AUDIT & LOGGING QUERIES ====================
# Audit Log Queries
GET_AUDIT_LOGS=SELECT * FROM AuditLogs WHERE AuditDate BETWEEN @startDate AND @endDate ORDER BY AuditDate DESC
GET_AUDIT_LOGS_BY_USER=SELECT * FROM AuditLogs WHERE UserId = @userId ORDER BY AuditDate DESC
GET_AUDIT_LOGS_BY_TABLE=SELECT * FROM AuditLogs WHERE TableName = @tableName ORDER BY AuditDate DESC
GET_AUDIT_LOGS_BY_ACTION=SELECT * FROM AuditLogs WHERE ActionType = @actionType ORDER BY AuditDate DESC
INSERT_AUDIT_LOG=INSERT INTO AuditLogs (TableName, RecordId, ActionType, OldValue, NewValue, UserId, UserName, AuditDate, IPAddress, UserAgent) VALUES (@tableName, @recordId, @actionType, @oldValue, @newValue, @userId, @userName, GETDATE(), @ipAddress, @userAgent)

# Activity Log Queries
GET_USER_ACTIVITIES=SELECT * FROM ActivityLogs WHERE UserId = @userId AND ActivityDate >= DATEADD(day, -30, GETDATE()) ORDER BY ActivityDate DESC
GET_RECENT_ACTIVITIES=SELECT TOP 100 * FROM ActivityLogs ORDER BY ActivityDate DESC
INSERT_ACTIVITY_LOG=INSERT INTO ActivityLogs (UserId, ActivityType, ActivityDescription, IPAddress, UserAgent, ActivityDate) VALUES (@userId, @activityType, @activityDescription, @ipAddress, @userAgent, GETDATE())

# Error Log Queries
GET_ERROR_LOGS=SELECT * FROM ErrorLogs WHERE ErrorDate >= DATEADD(hour, -24, GETDATE()) ORDER BY ErrorDate DESC
GET_ERROR_LOGS_BY_SEVERITY=SELECT * FROM ErrorLogs WHERE Severity = @severity AND ErrorDate >= DATEADD(day, -7, GETDATE()) ORDER BY ErrorDate DESC
INSERT_ERROR_LOG=INSERT INTO ErrorLogs (ErrorCode, ErrorMessage, StackTrace, Severity, Source, UserId, ErrorDate) VALUES (@errorCode, @errorMessage, @stackTrace, @severity, @source, @userId, GETDATE())

# ==================== REPORTING QUERIES ====================
# Sales Reports
GET_DAILY_SALES_REPORT=SELECT CAST(OrderDate AS DATE) as Date, COUNT(*) as OrderCount, SUM(TotalAmount) as TotalSales FROM Orders WHERE OrderStatus = 'Completed' AND OrderDate >= DATEADD(day, -@days, GETDATE()) GROUP BY CAST(OrderDate AS DATE) ORDER BY Date
GET_MONTHLY_SALES_REPORT=SELECT YEAR(OrderDate) as Year, MONTH(OrderDate) as Month, COUNT(*) as OrderCount, SUM(TotalAmount) as TotalSales FROM Orders WHERE OrderStatus = 'Completed' GROUP BY YEAR(OrderDate), MONTH(OrderDate) ORDER BY Year, Month
GET_PRODUCT_SALES_REPORT=SELECT p.ProductId, p.ProductName, SUM(oi.Quantity) as QuantitySold, SUM(oi.TotalPrice) as Revenue FROM Products p INNER JOIN OrderItems oi ON p.ProductId = oi.ProductId INNER JOIN Orders o ON oi.OrderId = o.OrderId WHERE o.OrderStatus = 'Completed' AND o.OrderDate >= DATEADD(month, -@months, GETDATE()) GROUP BY p.ProductId, p.ProductName ORDER BY Revenue DESC
GET_CATEGORY_SALES_REPORT=SELECT c.CategoryId, c.CategoryName, SUM(oi.Quantity) as QuantitySold, SUM(oi.TotalPrice) as Revenue FROM Categories c INNER JOIN ProductCategories pc ON c.CategoryId = pc.CategoryId INNER JOIN OrderItems oi ON pc.ProductId = oi.ProductId INNER JOIN Orders o ON oi.OrderId = o.OrderId WHERE o.OrderStatus = 'Completed' GROUP BY c.CategoryId, c.CategoryName ORDER BY Revenue DESC

# User Reports
GET_USER_REGISTRATION_REPORT=SELECT CAST(CreatedDate AS DATE) as Date, COUNT(*) as NewUsers FROM Users WHERE CreatedDate >= DATEADD(day, -@days, GETDATE()) GROUP BY CAST(CreatedDate AS DATE) ORDER BY Date
GET_USER_LOGIN_REPORT=SELECT CAST(LoginDate AS DATE) as Date, COUNT(DISTINCT UserId) as UniqueLogins, COUNT(*) as TotalLogins FROM LoginHistory WHERE LoginDate >= DATEADD(day, -@days, GETDATE()) GROUP BY CAST(LoginDate AS DATE) ORDER BY Date
GET_USER_ACTIVITY_REPORT=SELECT u.UserId, u.Username, COUNT(al.ActivityId) as ActivityCount, MAX(al.ActivityDate) as LastActivity FROM Users u LEFT JOIN ActivityLogs al ON u.UserId = al.UserId WHERE al.ActivityDate >= DATEADD(day, -@days, GETDATE()) GROUP BY u.UserId, u.Username ORDER BY ActivityCount DESC

# Inventory Reports
GET_INVENTORY_STATUS_REPORT=SELECT CategoryName, COUNT(*) as ProductCount, SUM(StockQuantity) as TotalStock, SUM(StockQuantity * Price) as StockValue FROM Products p INNER JOIN Categories c ON p.CategoryId = c.CategoryId WHERE p.IsActive = 1 GROUP BY CategoryName
GET_LOW_STOCK_REPORT=SELECT ProductId, ProductName, SKU, StockQuantity, ReorderLevel, (ReorderLevel - StockQuantity) as QuantityNeeded FROM Products WHERE StockQuantity <= ReorderLevel AND IsActive = 1 ORDER BY QuantityNeeded DESC
GET_STOCK_MOVEMENT_REPORT=SELECT p.ProductName, sm.MovementType, SUM(sm.Quantity) as TotalQuantity FROM StockMovements sm INNER JOIN Products p ON sm.ProductId = p.ProductId WHERE sm.MovementDate >= DATEADD(day, -@days, GETDATE()) GROUP BY p.ProductName, sm.MovementType ORDER BY p.ProductName, sm.MovementType

# ==================== SYSTEM QUERIES ====================
# Health Check Queries
CHECK_DATABASE_CONNECTION=SELECT 1 as Connected
GET_DATABASE_SIZE=SELECT DB_NAME() as DatabaseName, SUM(size * 8 / 1024) as SizeMB FROM sys.master_files WHERE DB_NAME(database_id) = DB_NAME() GROUP BY DB_NAME(database_id)
GET_TABLE_SIZES=SELECT t.name as TableName, SUM(p.rows) as RowCount, SUM(a.total_pages) * 8 / 1024 as SizeMB FROM sys.tables t INNER JOIN sys.partitions p ON t.object_id = p.object_id INNER JOIN sys.allocation_units a ON p.partition_id = a.container_id WHERE t.is_ms_shipped = 0 GROUP BY t.name ORDER BY SizeMB DESC
GET_RUNNING_QUERIES=SELECT session_id, start_time, status, command, database_id, user_id, blocking_session_id, wait_type, wait_time, cpu_time, total_elapsed_time, reads, writes, logical_reads FROM sys.dm_exec_requests WHERE session_id > 50
GET_DATABASE_STATISTICS=SELECT * FROM sys.dm_db_index_usage_stats WHERE database_id = DB_ID()

# Maintenance Queries
REBUILD_ALL_INDEXES=EXEC sp_MSforeachtable @command1='ALTER INDEX ALL ON ? REBUILD'
UPDATE_STATISTICS=EXEC sp_updatestats
BACKUP_DATABASE=BACKUP DATABASE [@databaseName] TO DISK = @backupPath WITH FORMAT, INIT, NAME = @backupName, COMPRESSION
SHRINK_LOG_FILE=DBCC SHRINKFILE (N'@logFileName', 1)

# ==================== STORED PROCEDURES ====================
# Define stored procedure calls
EXEC_GET_USER_DETAILS=EXEC sp_GetUserDetails @UserId = @userId
EXEC_CREATE_ORDER=EXEC sp_CreateOrder @UserId = @userId, @OrderItems = @orderItems, @PaymentMethod = @paymentMethod
EXEC_PROCESS_PAYMENT=EXEC sp_ProcessPayment @OrderId = @orderId, @PaymentDetails = @paymentDetails
EXEC_GENERATE_INVOICE=EXEC sp_GenerateInvoice @OrderId = @orderId
EXEC_CALCULATE_SHIPPING=EXEC sp_CalculateShipping @OrderId = @orderId, @ShippingAddress = @shippingAddress
EXEC_APPLY_DISCOUNT=EXEC sp_ApplyDiscount @OrderId = @orderId, @DiscountCode = @discountCode
EXEC_CHECK_INVENTORY=EXEC sp_CheckInventory @ProductList = @productList
EXEC_CLEANUP_OLD_DATA=EXEC sp_CleanupOldData @DaysToKeep = @daysToKeep
EXEC_GENERATE_REPORT=EXEC sp_GenerateReport @ReportType = @reportType, @StartDate = @startDate, @EndDate = @endDate

# ==================== COMPLEX QUERIES ====================
# Business Logic Queries
CALCULATE_ORDER_TOTAL=SELECT o.OrderId, SUM(oi.Quantity * oi.UnitPrice) as SubTotal, o.TaxAmount, o.ShippingAmount, o.DiscountAmount, (SUM(oi.Quantity * oi.UnitPrice) + o.TaxAmount + o.ShippingAmount - o.DiscountAmount) as Total FROM Orders o INNER JOIN OrderItems oi ON o.OrderId = oi.OrderId WHERE o.OrderId = @orderId GROUP BY o.OrderId, o.TaxAmount, o.ShippingAmount, o.DiscountAmount

CHECK_PRODUCT_AVAILABILITY_WITH_RESERVED=SELECT p.ProductId, p.ProductName, p.StockQuantity, ISNULL(r.ReservedQuantity, 0) as ReservedQuantity, (p.StockQuantity - ISNULL(r.ReservedQuantity, 0)) as AvailableQuantity FROM Products p LEFT JOIN (SELECT ProductId, SUM(Quantity) as ReservedQuantity FROM OrderItems oi INNER JOIN Orders o ON oi.OrderId = o.OrderId WHERE o.OrderStatus IN ('Pending', 'Processing') GROUP BY ProductId) r ON p.ProductId = r.ProductId WHERE p.ProductId = @productId

GET_CUSTOMER_RECOMMENDATIONS=SELECT TOP 10 p.ProductId, p.ProductName, COUNT(DISTINCT o2.CustomerId) as PurchasedByOthers FROM Products p INNER JOIN OrderItems oi1 ON p.ProductId = oi1.ProductId INNER JOIN Orders o1 ON oi1.OrderId = o1.OrderId INNER JOIN Orders o2 ON o1.CustomerId != o2.CustomerId INNER JOIN OrderItems oi2 ON o2.OrderId = oi2.OrderId AND oi2.ProductId IN (SELECT ProductId FROM OrderItems oi3 INNER JOIN Orders o3 ON oi3.OrderId = o3.OrderId WHERE o3.CustomerId = @customerId) WHERE p.ProductId NOT IN (SELECT ProductId FROM OrderItems oi4 INNER JOIN Orders o4 ON oi4.OrderId = o4.OrderId WHERE o4.CustomerId = @customerId) GROUP BY p.ProductId, p.ProductName ORDER BY PurchasedByOthers DESC

# Performance Analysis Queries
GET_SLOW_QUERIES=SELECT TOP 20 total_elapsed_time / execution_count as avg_elapsed_time, execution_count, total_logical_reads / execution_count as avg_logical_reads, total_logical_writes / execution_count as avg_logical_writes, total_physical_reads / execution_count as avg_physical_reads, SUBSTRING(st.text, (qs.statement_start_offset/2) + 1, ((CASE statement_end_offset WHEN -1 THEN DATALENGTH(st.text) ELSE qs.statement_end_offset END - qs.statement_start_offset)/2) + 1) as query_text FROM sys.dm_exec_query_stats qs CROSS APPLY sys.dm_exec_sql_text(qs.sql_handle) st ORDER BY avg_elapsed_time DESC

GET_INDEX_USAGE_STATS=SELECT OBJECT_NAME(s.object_id) as TableName, i.name as IndexName, i.type_desc as IndexType, s.user_seeks, s.user_scans, s.user_lookups, s.user_updates, s.last_user_seek, s.last_user_scan, s.last_user_lookup, s.last_user_update FROM sys.dm_db_index_usage_stats s INNER JOIN sys.indexes i ON s.object_id = i.object_id AND s.index_id = i.index_id WHERE s.database_id = DB_ID() ORDER BY (s.user_seeks + s.user_scans + s.user_lookups) DESC